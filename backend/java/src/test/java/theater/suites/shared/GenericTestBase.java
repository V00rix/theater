package theater.suites.shared;

import org.junit.Before;
import org.springframework.data.jpa.repository.JpaRepository;
import theater.domain.entities.EntityBase;
import theater.domain.exceptions.BadInjectionException;

import java.util.List;
import java.util.Optional;

@SuppressWarnings({"WeakerAccess", "unchecked", "unused"})
public abstract class GenericTestBase<E extends EntityBase> extends SpringTestBase {
    protected static final int MIN_MULTIPLE = 3;

    protected static int duplicateCount = 2;

    protected JpaRepository<E, Long> repository;

    @Before
    public void setUp() {
        this.repository = getRepository();
        if (repository == null) {
            throw new BadInjectionException("Repository was not provided");
        }
        this.repository = getRepository();
        var single = construct();
        var multiple = constructMultiple();
        var size = multiple.size();
        if (multiple.size() < MIN_MULTIPLE) {
            throw new BadInjectionException(
                    String.format("multiple() provided too few instances. Expected %d got %d", MIN_MULTIPLE, size));
        }
        if (!ofUnique(multiple) || contains(multiple, single)) {
            throw new BadInjectionException("duplicates were generated by multiple()");
        }
    }

    //region Abstract
    protected abstract JpaRepository<E, Long> getRepository();

    protected abstract E construct();

    protected abstract List<E> constructMultiple();
    //endregion

    //region Helpers
    protected boolean ofUnique(List<E> multiple) {
        return ofUnique(multiple, 0, multiple.size());
    }

    protected boolean ofUnique(List<E> multiple, int from, int size) {
        if (from == size - 1) {
            return true;
        }

        for (int i = from; i < size - 2; i++) {
            if (multiple.get(i).equalz(multiple.get(i + 1))) {
                return false;
            }
        }
        return ofUnique(multiple, from + 1, size);
    }

    protected Optional<E> getFirstFromList(List<E> entities) {
        if (entities.isEmpty()) {
            return Optional.empty();
        } else {
            return Optional.of(entities.get(0));
        }
    }

    protected Optional<E> findFirst() {
        var entities = findAll();
        return getFirstFromList(entities);
    }

    protected E findFirstThrowIfNotFound() {
        return findFirst().orElseThrow();
    }

    protected Optional<E> findFirstThrowIfMultiple() {
        var entities = findAll();
        assert entities.size() < 2;
        return getFirstFromList(entities);
    }

    protected List<E> findAll() {
        return repository.findAll();
    }

    protected List<E> findAllThrowIfNotFound() {
        var found = findAll();
        assert !found.isEmpty();
        return found;
    }

    protected boolean contains(List<E> array, E entity) {
        for (var e : array) {
            if (e.equalz(entity)) {
                return true;
            }
        }
        return false;
    }

    protected Long max(List<Long> elements, int from, int size) {
        if (from == size - 2) {
            return Long.max(elements.get(from), elements.get(from + 1));
        }

        return Long.max(elements.get(from), max(elements, from + 1, size));
    }

    protected void deleteAndFlush() {
        repository.deleteAll();
        repository.flush();
    }

    protected E createAndSave() {
        var entity = construct();
        repository.save(entity);
        return entity;
    }

    protected List<E> createAndSaveMultiple() {
        var entities = constructMultiple();
        repository.saveAll(entities);
        return entities;
    }

    protected E findFirstThrowIfMultipleOrNotFound() {
        var found = findAll();
        assert found.size() == 1;
        var entities = getFirstFromList(found);

        //noinspection ConstantConditions
        return entities.get();
    }

    protected List<E> findExactCount(int count) {
        var found = findAll();
        assert found.size() == count;
        return found;
    }

    protected boolean arrayEquals(List<E> first, List<E> second) {
        var size = first.size();

        if (size != second.size()) {
            return false;
        }

        for (int i = 0; i < size; i++) {
            if (!first.get(i).equalz(second.get(i))) {
                return false;
            }
        }

        return true;
    }

    protected Long max(List<Long> elements) {
        return max(elements, 0, elements.size());
    }
    //endregion
}
